import os
import yaml
import numpy as np
import torch
from tqdm import tqdm
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error

from ultralytics import YOLO

# ÈÖçÁΩÆ
CONFIG = {
    "data_dir": "Datasets",
    "model_path": "models/best.pt",
    "imgsz": 640,
    "device": "cuda:0",  # <-- ËøôÈáåÊîπ‰∫Ü
    "save_dir": "results/test_evaluation"
}

# ÂàõÂª∫‰øùÂ≠òÁõÆÂΩï
os.makedirs(CONFIG["save_dir"], exist_ok=True)

# Âä†ËΩΩÊ®°Âûã
model = YOLO(CONFIG["model_path"])
model.to(CONFIG["device"])

# ËØªÂèñÊï∞ÊçÆÈõÜ‰ø°ÊÅØ
with open(f"{CONFIG['data_dir']}/data.yaml", "r") as f:
    data_info = yaml.safe_load(f)
test_img_dir = os.path.join(CONFIG["data_dir"], "test", "images")
test_label_dir = os.path.join(CONFIG["data_dir"], "test", "labels")
names = data_info["names"]

# Êé®ÁêÜÂèÇÊï∞
CONF_THRESH = 0.25  # ÁΩÆ‰ø°Â∫¶ÈòàÂÄº

# Â≠òÂÇ®ÁªüËÆ°‰ø°ÊÅØ
all_true = []
all_preds = []

# ËÆ°ÁÆóÊ¨ßÊ∞èË∑ùÁ¶ª
def euclidean_distance(p1, p2):
    return np.sqrt(np.sum((p1 - p2) ** 2))

# ÈÅçÂéÜÊµãËØïÈõÜÊé®ÁêÜ
test_images = [f for f in os.listdir(test_img_dir) if f.endswith(('.jpg', '.png'))]
for img_name in tqdm(test_images, desc="Testing"):
    img_path = os.path.join(test_img_dir, img_name)
    label_path = os.path.join(test_label_dir, os.path.splitext(img_name)[0] + ".txt")

    # Êé®ÁêÜ
    results = model.predict(img_path, save=False, imgsz=CONFIG["imgsz"], conf=CONF_THRESH, device=CONFIG["device"])
    pred = results[0]

    # ÊèêÂèñÈ¢ÑÊµãÁöÑÂÖ≥ÈîÆÁÇπÂùêÊ†á
    if pred.keypoints is not None:
        pred_coords = pred.keypoints[0].cpu().numpy()  # Ëé∑ÂèñÁ¨¨‰∏Ä‰∏™Ê£ÄÊµãÂà∞ÁöÑÂÖ≥ÈîÆÁÇπ
    else:
        pred_coords = np.zeros((5, 2))  # Â¶ÇÊûúÊ≤°ÊúâÂÖ≥ÈîÆÁÇπÈ¢ÑÊµãÔºåÂàôÈªòËÆ§‰∏∫0

    # Âä†ËΩΩGTÊ†áÁ≠æ
    if os.path.exists(label_path):
        with open(label_path, "r") as f:
            lines = f.readlines()
            gt_coords = []
            for line in lines:
                parts = line.strip().split()
                coords = list(map(float, parts[1:]))  # Ëé∑ÂèñÁúüÂÆûÂùêÊ†á
                gt_coords.append(coords)
            gt_coords = np.array(gt_coords)
    else:
        gt_coords = np.zeros((0, 2))

    # Á°Æ‰øùÈ¢ÑÊµãÂíåÁúüÂÆûÂùêÊ†áÈÉΩÂÖ∑ÊúâÁõ∏ÂêåÁöÑÊï∞Èáè
    if len(pred_coords) == len(gt_coords):
        for pred_coord, gt_coord in zip(pred_coords, gt_coords):
            distance = euclidean_distance(pred_coord, gt_coord)  # ËÆ°ÁÆóÊ¨ßÊ∞èË∑ùÁ¶ª
            all_true.append(gt_coord)
            all_preds.append(pred_coord)

# ËÆ°ÁÆóÂπ≥ÂùáÁªùÂØπËØØÂ∑Æ (MAE)
all_true = np.array(all_true)
all_preds = np.array(all_preds)
mae = mean_absolute_error(all_true, all_preds)

# Ê±áÊÄªËØÑ‰º∞ÁªìÊûú
print("\nüìà ÊµãËØïÈõÜËØÑ‰º∞ÁªìÊûú:")
print(f"Mean Absolute Error (MAE): {mae:.4f}")
